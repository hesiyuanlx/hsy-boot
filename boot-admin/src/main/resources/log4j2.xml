<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--Configuration后面的status，这个用于设置log4j2自身内部的信息输出，可以不设置，当设置成trace时，你会看到log4j2内部各种详细输出-->
<!--monitorInterval：Log4j能够自动检测修改配置 文件和重新配置本身，设置间隔秒数-->
<!--<configuration status="WARN" monitorInterval="30">-->
<configuration status="INFO" monitorInterval="30">
    <Properties>
        <!-- （*必须,各应用需要修改） 部署应用的名称,命名规则 :全部小写字母、中短横线、数字,与微服务命名,disconf中命名一致 -->
        <property name="app.name">boot-admin</property>
        <property name="log.dir">${sys:log-dir:-./logs}</property>
        <property name="rolling.max">20</property>
        <property name="warn.rolling.max">10</property>
        <!-- *必须并强制遵守 日志文件的编码 -->
        <property name="log.charset">UTF-8</property>
        <!-- *必须并强制遵守 日志格式说明：  -->
        <property name="log.pattern">%d - [%thread] %-5level %logger{36}:%line - %msg%n</property>
    </Properties>

    <!--先定义所有的appender-->
    <appenders>
        <!--这个输出控制台的配置-->
        <console name="Console" target="SYSTEM_OUT">
            <!--输出日志的格式-->
            <PatternLayout pattern="${log.pattern}"/>
        </console>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则存档-->
        <RollingFile name="admin-info" fileName="${log.dir}/${app.name}_info.log"
                     filePattern="${log.dir}/${app.name}_info.%d{yyyy-MM-dd}.%i.log" immediateFlush="false">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="debug" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${log.charset}" pattern="${log.pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="${rolling.max}">
                <Delete basePath="${log.dir}/" maxDepth="2">
                    <IfFileName glob="${app.name}_info.*.log"/>
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="2d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则存档-->
        <RollingFile name="admin-warn" fileName="${log.dir}/${app.name}_warn.log"
                     filePattern="${log.dir}/${app.name}_warn.%d{yyyy-MM-dd}.%i.log" immediateFlush="false">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="warn" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${log.charset}" pattern="${log.pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
            <DefaultRolloverStrategy max="${warn.rolling.max}">
                <Delete basePath="${log.dir}/" maxDepth="2">
                    <IfFileName glob="${app.name}_warn.*.log"/>
                    <!--!Note: 这里的age必须和filePattern协调, 后者是精确到HH, 这里就要写成xH, xd就不起作用
                    另外, 数字最好>2, 否则可能造成删除的时候, 最近的文件还处于被占用状态,导致删除不成功!-->
                    <!--7天-->
                    <IfLastModified age="2d"/>
                </Delete>
            </DefaultRolloverStrategy>
        </RollingFile>

        <!-- 这个会打印出所有的info及以下级别的信息，每次大小超过size，则存档-->
        <RollingFile name="admin-error" fileName="${log.dir}/${app.name}_error.log"
                     filePattern="${log.dir}/${app.name}_error.%d{yyyy-MM-dd}.%i.log" immediateFlush="false">
            <!--控制台只输出level及以上级别的信息（onMatch），其他的直接拒绝（onMismatch）-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout charset="${log.charset}" pattern="${log.pattern}"/>
            <Policies>
                <TimeBasedTriggeringPolicy/>
                <SizeBasedTriggeringPolicy size="100 MB"/>
            </Policies>
        </RollingFile>

    </appenders>
    <!-- 异步日志 然后定义logger，只有定义了logger并引入的appender，appender才会生效-->
    <loggers>
        <AsyncLogger name="asyncLogger" level="info" additivity="false">
            <appender-ref ref="audit-admin-info"/>
            <appender-ref ref="audit-admin-warn"/>
            <appender-ref ref="audit-admin-error"/>
        </AsyncLogger>
        <root level="info">
            <appender-ref ref="Console"/>
            <appender-ref ref="admin-info"/>
            <appender-ref ref="admin-warn"/>
            <appender-ref ref="admin-error"/>
        </root>
    </loggers>
</configuration>